'''This script will remove filtering files generated by mutect2parallel and 
remove corresponding lines from the log file.'''

import os
from glob import glob
from shutil import rmtree
from argparse import ArgumentParser

def getDelim(line):
	# Returns delimiter
	for i in ["\t", ",", " "]:
		if i in line:
			return i
	print("\n\t[Error] Cannot determine delimeter. Check file formatting. Exiting.\n")
	quit()

def cleanLog(infile, p):
	# Remove filtering lines from mutect log
	with open(infile, "r") as f:
		log = f.readlines()
	log = log[:3]
	d = getDelim(log[0])
	with open(infile, "w") as out:
		out.write(log[0])
		for i in log[1:]:
			s = i.split(d)
			o = s[-1]
			if p not in o:
				# Make sure output points to same direcotry
				s[-1] = p + o[o.rfind("/")+1:]
				o = s[-1]
			if os.path.isfile(o + ".gz") and not os.path.isfile(o):
				s[-1] = o + ".gz"
			out.write(d.join(s))

def cleanDir(path):
	# Removes extraneous files and direcotries
	files = glob(path + "*")
	for f in files:
		if os.path.isdir(f):
			rmtree(f)
		elif ".csv" in f:
			os.remove(f)
		elif "filtered." in f:
			os.remove(f)
		elif ".passed." in f:
			os.remove(f)
		elif ".pileup." in f:
			os.remove(f)
		elif ".contamination." in f:
			os.remove(f)
		elif f.count(".gz") > 1:
			# Remove multiple gz tags
			os.rename(f, f[:f.rfind(".")])

def main():
	parser = ArgumentParser("This script will remove filtering files generated \
by mutect2parallel and remove corresponding lines from the log file.")
	parser.add_argument("i", help = "Path to parent directory.")
	args = parser.parse_args()
	if args.i[-1] != "/":
		args.i += "/"
	directories = glob(args.i + "*")
	print()
	for i in directories:
		if os.path.isdir(i):
			if i[-1] != "/":
				i += "/"
			print(("\tCleaning {}").format(i))
			cleanDir(i)
			log = i + "mutectLog.txt"
			if not os.path.isfile(log):
				print(("\t[Error] {} not found.").format(log))
			else:
				cleanLog(log, i)
	print("\tFinished.\n")

if __name__ == "__main__":
	main()
